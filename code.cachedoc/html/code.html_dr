section_env([file_top_section,pragmas([]),paper_opts(1,afourpaper),coversec([],[],[],[],nop,nop,[]),level(0)],global_label("Práctica 2: ISO-Prolog"),[string_esc("Práctica 2: ISO-Prolog")],[show_toc(subparts),section_env([unnumbered,level(1),subfile(fulltoc),is_special(toc)],global_label("Table of Contents"),string_esc("Table of Contents"),[show_toc(full)]),[[],[raw_nl,[[section_env([level(2)],local_label("Introducción"),[string_esc("Introducción")],[string_esc(" "),p([]),string_esc("Este módulo implementa un compresor y descompresor de secuencias de caracteres. El objetivo es reducir la longitud de una secuencia representando patrones repetitivos de forma más concisa. La compresión es con pérdidas si la secuencia comprimida es más larga que la original, pero el objetivo es encontrar la representación más corta."),p([])]),section_env([level(2)],local_label("Representación de datos"),[string_esc("Representación de datos")],[string_esc(" "),p([]),string_esc("Las secuencias son listas de Prolog. Los elementos de estas listas sin comprimir estan compuestas por caracteres."),p([]),string_esc("Una secuencia comprimida también es una lista, pero puede contener: "),env_(itemize,[string_esc(" "),item([]),string_esc("Átomos originales. "),item([]),string_esc("Pares "),tt([string_esc("[Elemento, Num]")]),string_esc(", donde "),tt([string_esc("Elemento")]),string_esc(" "),string_esc("es un átomo y "),tt([string_esc("Num")]),string_esc(" "),string_esc("es el número de veces que se repite. "),item([]),string_esc("Grupos complejos "),tt([string_esc("['<', S1, S2, ..., Sk, '>', Num]")]),string_esc(", donde "),tt([string_esc("S1...Sk")]),string_esc(" "),string_esc("es una subsecuencia (que puede estar ya comprimida o ser una mezcla de átomos y grupos simples) y "),tt([string_esc("Num")]),string_esc(" "),string_esc("indica cuántas veces se repite toda la subsecuencia "),tt([string_esc("S1...Sk")]),string_esc(". ")]),string_esc(" "),string_esc("La descompresión revierte estos formatos a la secuencia original de átomos."),p([])]),section_env([level(2)],local_label("Funcionalidades"),[string_esc("Funcionalidades")],[string_esc(" "),p([]),string_esc("El módulo implementa las siguientes funcionalidades principales:"),p([]),env_(enumerate,[string_esc(" "),item([]),string_esc("Compresión de secuencias: Busca la representación más corta de una secuencia dada, utilizando memoización para optimizar el proceso. "),item([]),string_esc("Descompresión de secuencias: Reconstruye la secuencia original a partir de su forma comprimida. "),item([]),string_esc("Predicados auxiliares para dividir secuencias, agrupar elementos repetidos, y encontrar la compresión óptima entre varias candidatas. ")]),string_esc(" "),p([])]),section_env([level(2)],local_label("Ejemplos de uso"),[string_esc("Ejemplos de uso")],[string_esc(" "),p([]),string_esc("A continuación, se presenta un ejemplo de cada funcionalidad principal del módulo."),p([]),bf([string_esc("split/3 - Dividir una secuencia:")]),string_esc(" "),codeblock("text","
?- split([a,b,c], Parte1, Parte2).
Parte1 = [a],
Parte2 = [b, c] ? ;
Parte1 = [a, b],
Parte2 = [c] ? ;"),string_esc(" "),p([]),bf([string_esc("group/3 - Formar un grupo comprimido:")]),string_esc(" "),codeblock("text","
?- group([a,b,c,d,e], 3, Grupo).
Grupo = ['<', a, b, c, d, e, '>', 3]"),string_esc(" "),p([]),bf([string_esc("is_repeated/3 - Verificar si una secuencia es una repetición:")]),string_esc(" "),codeblock("text","
?- is_repeated([a,b,a,b,a,b], [a,b], Num).
Num = 3"),string_esc(" "),p([]),bf([string_esc("simple_repetition/2 - Compresión por repetición simple:")]),string_esc(" "),codeblock("text","
?- simple_repetition([x,y,x,y,x,y], Comprimida).
Comprimida = ['<', x, y, '>', 3]"),string_esc(" "),p([]),bf([string_esc("repetition/2 - Compresión por repetición (con compresión interna):")]),string_esc(" "),codeblock("text","
?- repetition([a,a,a,a], Comprimida) 
Comprimida = [a, 4] ? ; 
Comprimida = ['<',a,a,'>',2]"),string_esc(" "),p([]),bf([string_esc("compress/2 - Compresión completa de una secuencia:")]),string_esc(" "),codeblock("text","
?- compress([a,b,b,b,b,a,b,b,b,b], Comprimida).
Comprimida = ['<', a, b, 4, '>', 2]"),string_esc(" "),p([]),bf([string_esc("min_list/2 - Encontrar la lista más corta en una lista de listas:")]),string_esc(" "),codeblock("text","
?- min_list([[a,b,c],[a,b],[a,b,a,b]], Min).
Min = [a, b]"),string_esc(" "),p([]),bf([string_esc("decompress/2 - Descompresión de una secuencia:")]),string_esc(" "),codeblock("text","
?- decompress(['<',a,a,b,b,'>',3,c], Descomprimida).
Descomprimida = [a, a, b, b, a, a, b, b, a, a, b, b, c]"),string_esc(" "),p([]),bf([string_esc("expand_sequence/3 - Expandir una secuencia repetidamente:")]),string_esc(" "),codeblock("text","
?- expand_sequence([a,b,c], 3, SecuenciaExpandida).
SecuenciaExpandida = [a, b, c, a, b, c, a, b, c]")])]],linebreak],[section_env([with_parent,level(2)],local_label("Usage and interface"),string_esc("Usage and interface"),cartouche(itemize_env(bullet,[[item([]),bf([string_esc("Library usage"),string_esc(":")]),linebreak,tt(string_esc(":- use_module(/home/mihai/pd/practica2/Practica2-PD/code.pl)."))],[item([]),bf([string_esc("Exports"),string_esc(":")]),linebreak,itemize_env(minus,[[[item([]),em([string_esc("Predicates"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("0"),string_esc("author_data/4"),string_esc("author_data/4")),string_esc(", ")],[idx_env(use,code,localnum_label("1"),string_esc("split/3"),string_esc("split/3")),string_esc(", ")],[idx_env(use,code,localnum_label("2"),string_esc("group/3"),string_esc("group/3")),string_esc(", ")],[idx_env(use,code,localnum_label("3"),string_esc("is_repeated/3"),string_esc("is_repeated/3")),string_esc(", ")],[idx_env(use,code,localnum_label("4"),string_esc("simple_repetition/2"),string_esc("simple_repetition/2")),string_esc(", ")],[idx_env(use,code,localnum_label("5"),string_esc("compress/2"),string_esc("compress/2")),string_esc(", ")],[idx_env(use,code,localnum_label("6"),string_esc("memo/2"),string_esc("memo/2")),string_esc(", ")],[idx_env(use,code,localnum_label("7"),string_esc("clean_memo/0"),string_esc("clean_memo/0")),string_esc(", ")],[idx_env(use,code,localnum_label("8"),string_esc("recursive_compression/2"),string_esc("recursive_compression/2")),string_esc(", ")],[idx_env(use,code,localnum_label("9"),string_esc("better_compression_memo/2"),string_esc("better_compression_memo/2")),string_esc(", ")],[idx_env(use,code,localnum_label("10"),string_esc("better_compression/2"),string_esc("better_compression/2")),string_esc(", ")],[idx_env(use,code,localnum_label("11"),string_esc("compression/2"),string_esc("compression/2")),string_esc(", ")],[idx_env(use,code,localnum_label("12"),string_esc("repetition/2"),string_esc("repetition/2")),string_esc(", ")],[idx_env(use,code,localnum_label("13"),string_esc("division/2"),string_esc("division/2")),string_esc(", ")],[idx_env(use,code,localnum_label("14"),string_esc("decompress/2"),string_esc("decompress/2")),string_esc(", ")],[idx_env(use,code,localnum_label("15"),string_esc("extract_group/4"),string_esc("extract_group/4")),string_esc(", ")],[idx_env(use,code,localnum_label("16"),string_esc("min_list/2"),string_esc("min_list/2")),string_esc(", ")],[idx_env(use,code,localnum_label("17"),string_esc("min_list_aux/4"),string_esc("min_list_aux/4")),string_esc(", ")],[idx_env(use,code,localnum_label("18"),string_esc("expand_sequence/3"),string_esc("expand_sequence/3")),string_esc(".")]],raw_nl]],nop,nop,nop,nop,nop],[item([]),em([string_esc("Multifiles"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("19"),string_esc([6,99,97,108,108,95,105,110,95,109,111,100,117,108,101,47,50]),string_esc([6,99,97,108,108,95,105,110,95,109,111,100,117,108,101,47,50])),string_esc(".")]],raw_nl]]])],nop,nop,nop,nop]))),[],[],section_env([with_parent,level(2)],local_label("Documentation on exports"),string_esc("Documentation on exports"),[[defpred(local_label("author_data/4"),pred,"PREDICATE",author_data/4,[],[[string_esc("Define los datos del autor del módulo.")],[[]]]),sp("1"),raw_nl],[defpred(local_label("split/3"),pred,"PREDICATE",split/3,[],[[string_esc("Este predicado es cierto si "),var([string_esc("Parte1")]),string_esc(" "),string_esc("y "),var([string_esc("Parte2")]),string_esc(" "),string_esc("son dos subsecuencias no vacías que, cuando se concatenan, forman la secuencia "),var([string_esc("Todo")]),string_esc(".")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("split(Todo,Parte1,Parte2)")),string_esc([])],raw_nl],[string_esc("Su implementación es: "),env_(verbatim,[raw_string("split(Todo,Parte1,Parte2) :-
    append(Parte1,Parte2,Todo),
    Parte1\\==[],
    Parte2\\==[].
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Todo")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("20"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Parte1")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("21"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Parte2")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("22"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("split(Todo,Parte1,Parte2)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("23"),string_esc("Todo=[1,2,3,4,5]"),string_esc("Todo=[1,2,3,4,5]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("24"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("25"),string_esc("Parte1=[1,2]"),string_esc("Parte1=[1,2]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("26"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("27"),string_esc("Parte2=[3,4,5]"),string_esc("Parte2=[3,4,5]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("28"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("split(Todo,Parte1,Parte2)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("29"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("split(Todo,Parte1,Parte2)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("30"),string_esc("Todo=[a,b,c]"),string_esc("Todo=[a,b,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("31"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("32"),string_esc("Parte1=[a]"),string_esc("Parte1=[a]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("33"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("34"),string_esc("Parte2=[b,c]"),string_esc("Parte2=[b,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("35"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("split(Todo,Parte1,Parte2)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("36"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("split(Todo,Parte1,Parte2)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("37"),string_esc("Todo=[a]"),string_esc("Todo=[a]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("38"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("split(Todo,Parte1,Parte2)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("39"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("split(Todo,Parte1,Parte2)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("40"),string_esc("Todo=[]"),string_esc("Todo=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("41"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("split(Todo,Parte1,Parte2)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("42"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("split(Todo,Parte1,Parte2)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("43"),string_esc("Todo=[1,2,3,4,5]"),string_esc("Todo=[1,2,3,4,5]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("44"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("45"),string_esc("Parte1=[]"),string_esc("Parte1=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("46"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("47"),string_esc("Parte2=[1,2,3,4,5]"),string_esc("Parte2=[1,2,3,4,5]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("48"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("split(Todo,Parte1,Parte2)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("49"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("split(Todo,Parte1,Parte2)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("50"),string_esc("Todo=[1,2,3,4,5]"),string_esc("Todo=[1,2,3,4,5]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("51"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("52"),string_esc("Parte1=[1,2,3,4,5]"),string_esc("Parte1=[1,2,3,4,5]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("53"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("54"),string_esc("Parte2=[]"),string_esc("Parte2=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("55"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("split(Todo,Parte1,Parte2)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("56"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("group/3"),pred,"PREDICATE",group/3,[],[[string_esc("Este predicado relaciona una secuencia "),var([string_esc("Parte")]),string_esc(" "),string_esc("y un número de repeticiones "),var([string_esc("Num")]),string_esc(" "),string_esc("con su representación agrupada "),var([string_esc("Grupo")]),string_esc(". Si "),var([string_esc("Parte")]),string_esc(" "),string_esc("tiene más de un elemento, "),var([string_esc("Grupo")]),string_esc(" "),string_esc("será de la forma "),tt([string_esc("['<', Parte..., '>', Num]")]),string_esc(". Si "),var([string_esc("Parte")]),string_esc(" "),string_esc("tiene un solo elemento "),tt([string_esc("[X]")]),string_esc(", "),var([string_esc("Grupo")]),string_esc(" "),string_esc("será "),tt([string_esc("[X, Num]")]),string_esc(". Si "),var([string_esc("Parte")]),string_esc(" "),string_esc("es vacía, "),var([string_esc("Grupo")]),string_esc(" "),string_esc("será "),tt([string_esc("[Num]")]),string_esc(". El predicado puede funcionar en ambas direcciones (componiendo o descomponiendo "),var([string_esc("Grupo")]),string_esc(").")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("group(Parte,Num,Grupo)")),string_esc([])],raw_nl],[string_esc("Su implementación es: "),env_(verbatim,[raw_string("group(Parte,Num,Grupo) :-
    nonvar(Grupo),
    integer(Num),
    Num&gt;0,
    append(TempParte,[Num],Grupo),
    length(TempParte,L1),
    ( L1&gt;1 -&gt;
        append([&lt;],Temp2,TempParte),
        append(Parte,[&gt;],Temp2)
    ; Parte=TempParte
    ).
group(Parte,Num,Grupo) :-
    var(Grupo),
    nonvar(Parte),
    integer(Num),
    Num&gt;0,
    length(Parte,L),
    ( L&gt;1 -&gt;
        append([&lt;],Parte,Temp1),
        append(Temp1,[&gt;],Temp2),
        append(Temp2,[Num],Grupo)
    ; append(Parte,[Num],Grupo)
    ).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Parte")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("57"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Num")]),string_esc(" "),string_esc("is currently instantiated to an integer.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("58"),string_esc("integer/1"),string_esc("integer/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Grupo")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("59"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("group(Parte,Num,Grupo)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("60"),string_esc("Parte=[a,b,c,d,e]"),string_esc("Parte=[a,b,c,d,e]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("61"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("62"),string_esc("Num=3"),string_esc("Num=3"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("63"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("64"),string_esc("Grupo=[<,a,b,c,d,e,>,3]"),string_esc("Grupo=[<,a,b,c,d,e,>,3]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("65"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("group(Parte,Num,Grupo)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("66"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("group(Parte,Num,Grupo)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("67"),string_esc("Parte=[a,b]"),string_esc("Parte=[a,b]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("68"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("69"),string_esc("Num=2"),string_esc("Num=2"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("70"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("71"),string_esc("Grupo=[<,a,b,>,2]"),string_esc("Grupo=[<,a,b,>,2]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("72"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("group(Parte,Num,Grupo)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("73"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("group(Parte,Num,Grupo)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("74"),string_esc("Parte=[z]"),string_esc("Parte=[z]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("75"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("76"),string_esc("Num=5"),string_esc("Num=5"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("77"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("78"),string_esc("Grupo=[z,5]"),string_esc("Grupo=[z,5]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("79"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("group(Parte,Num,Grupo)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("80"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("group(Parte,Num,Grupo)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("81"),string_esc("Parte=[]"),string_esc("Parte=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("82"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("83"),string_esc("Num=5"),string_esc("Num=5"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("84"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("85"),string_esc("Grupo=[5]"),string_esc("Grupo=[5]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("86"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("group(Parte,Num,Grupo)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("87"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("group(Parte,Num,Grupo)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("88"),string_esc("Parte=[a,b,c]"),string_esc("Parte=[a,b,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("89"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("90"),string_esc("Num=0"),string_esc("Num=0"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("91"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("group(Parte,Num,Grupo)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("92"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("group(Parte,Num,Grupo)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("93"),string_esc("Parte=[a,b,c]"),string_esc("Parte=[a,b,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("94"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("95"),string_esc("Num=not_a_number"),string_esc("Num=not_a_number"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("96"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("group(Parte,Num,Grupo)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("97"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("group(Parte,Num,Grupo)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("98"),string_esc("Parte=not_a_list"),string_esc("Parte=not_a_list"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("99"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("100"),string_esc("Num=3"),string_esc("Num=3"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("101"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("group(Parte,Num,Grupo)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("102"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("group(Parte,Num,Grupo)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("103"),string_esc("Num=3"),string_esc("Num=3"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("104"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("105"),string_esc("Grupo=[<,a,b,c,d,e,>,3]"),string_esc("Grupo=[<,a,b,c,d,e,>,3]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("106"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("107"),string_esc("Parte=[a,b,c,d,e]"),string_esc("Parte=[a,b,c,d,e]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("108"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("group(Parte,Num,Grupo)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("109"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("group(Parte,Num,Grupo)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("110"),string_esc("Num=3"),string_esc("Num=3"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("111"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("112"),string_esc("Grupo=[<,a,b,c,d,e,>,2]"),string_esc("Grupo=[<,a,b,c,d,e,>,2]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("113"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("group(Parte,Num,Grupo)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("114"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("is_repeated/3"),pred,"PREDICATE",is_repeated/3,[],[[string_esc("Este predicado es cierto si la secuencia "),var([string_esc("Cs")]),string_esc(" "),string_esc("consiste en la secuencia "),var([string_esc("Parte")]),string_esc(" "),string_esc("repetida "),var([string_esc("Num")]),string_esc(" "),string_esc("veces. "),var([string_esc("Num")]),string_esc(" "),string_esc("debe ser mayor que 0 para que la repetición sea válida en el contexto de compresión.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("is_repeated(Cs,Parte,Num)")),string_esc([])],raw_nl],[string_esc("Su implementación es: "),env_(verbatim,[raw_string("is_repeated([],_1,0).
is_repeated(Cs,Parte,Num) :-
    Cs\\==[],
    Parte\\==[],
    append(Parte,Aux,Cs),
    is_repeated(Aux,Parte,Num1),
    ( var(Num) -&gt;
        Num is Num1+1
    ; Num&gt;0,
      Num is Num1+1
    ).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Cs")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("115"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Parte")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("116"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Num")]),string_esc(" "),string_esc("is currently instantiated to an integer.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("117"),string_esc("integer/1"),string_esc("integer/1"))],string_esc(")")]])]],raw_nl],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("is_repeated(Cs,Parte,Num)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("118"),string_esc("Cs=[a,b,a,b,a,b]"),string_esc("Cs=[a,b,a,b,a,b]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("119"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("120"),string_esc("Parte=[a,b]"),string_esc("Parte=[a,b]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("121"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("122"),string_esc("Num=3"),string_esc("Num=3"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("123"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("is_repeated(Cs,Parte,Num)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("124"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("is_repeated(Cs,Parte,Num)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("125"),string_esc("Cs=[]"),string_esc("Cs=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("126"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("127"),string_esc("Parte=[a,b,c]"),string_esc("Parte=[a,b,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("128"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("129"),string_esc("Num=0"),string_esc("Num=0"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("130"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("is_repeated(Cs,Parte,Num)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("131"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("is_repeated(Cs,Parte,Num)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("132"),string_esc("Cs=[]"),string_esc("Cs=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("133"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("134"),string_esc("Parte=[]"),string_esc("Parte=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("135"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("136"),string_esc("Num=0"),string_esc("Num=0"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("137"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("is_repeated(Cs,Parte,Num)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("138"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("is_repeated(Cs,Parte,Num)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("139"),string_esc("Cs=[a,b,c]"),string_esc("Cs=[a,b,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("140"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("141"),string_esc("Parte=[a,b]"),string_esc("Parte=[a,b]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("142"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("is_repeated(Cs,Parte,Num)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("143"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("is_repeated(Cs,Parte,Num)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("144"),string_esc("Cs=[a,b]"),string_esc("Cs=[a,b]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("145"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("146"),string_esc("Parte=[a,b,c]"),string_esc("Parte=[a,b,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("147"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("is_repeated(Cs,Parte,Num)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("148"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("is_repeated(Cs,Parte,Num)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("149"),string_esc("Cs=[a,a,a]"),string_esc("Cs=[a,a,a]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("150"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("151"),string_esc("Parte=[a]"),string_esc("Parte=[a]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("152"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("153"),string_esc("Num=0"),string_esc("Num=0"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("154"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("is_repeated(Cs,Parte,Num)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("155"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("simple_repetition/2"),pred,"PREDICATE",simple_repetition/2,[],[[string_esc("Este predicado es cierto si "),var([string_esc("Comprimida")]),string_esc(" "),string_esc("es una compresión de "),var([string_esc("Inicial")]),string_esc(" "),string_esc("que consiste en una única repetición de alguna "),var([string_esc("Parte")]),string_esc(" "),string_esc("de "),var([string_esc("Inicial")]),string_esc(". Busca una "),var([string_esc("Parte")]),string_esc(" "),string_esc("tal que "),var([string_esc("Inicial")]),string_esc(" "),string_esc("sea "),var([string_esc("Parte")]),string_esc(" "),string_esc("repetida "),var([string_esc("Num")]),string_esc(" "),string_esc("veces, y luego forma "),var([string_esc("Comprimida")]),string_esc(" "),string_esc("usando "),idx_env(use,pred,localnum_label("156"),[string_esc("group/3")],[string_esc("group/3")]),string_esc(".")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("simple_repetition(Inicial,Comprimida)")),string_esc([])],raw_nl],[string_esc("Su implementación es: "),env_(verbatim,[raw_string("simple_repetition(Inicial,Comprimida) :-
    Inicial\\==[],
    split(Inicial,Parte1,_1),
    is_repeated(Inicial,Parte1,Num),
    group(Parte1,Num,Comprimida).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Inicial")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("157"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Comprimida")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("158"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("simple_repetition(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("159"),string_esc("Inicial=[a,a,a,a]"),string_esc("Inicial=[a,a,a,a]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("160"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[var([string_esc("Comprimida")]),string_esc(" "),string_esc("is an element of "),var([string_esc("[[a,4],[<,a,a,>,2]]")]),string_esc(".")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("161"),string_esc("member/2"),string_esc("member/2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("simple_repetition(Inicial,Comprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("162"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("simple_repetition(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("163"),string_esc("Inicial=[x,y,x,y,x,y]"),string_esc("Inicial=[x,y,x,y,x,y]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("164"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("165"),string_esc("Comprimida=[<,x,y,>,3]"),string_esc("Comprimida=[<,x,y,>,3]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("166"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("simple_repetition(Inicial,Comprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("167"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("simple_repetition(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("168"),string_esc("Inicial=[]"),string_esc("Inicial=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("169"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("simple_repetition(Inicial,Comprimida)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("170"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("simple_repetition(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("171"),string_esc("Inicial=[a,a,a,b,b,b]"),string_esc("Inicial=[a,a,a,b,b,b]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("172"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("simple_repetition(Inicial,Comprimida)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("173"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("simple_repetition(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("174"),string_esc("Inicial=[a,b,c,d,e]"),string_esc("Inicial=[a,b,c,d,e]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("175"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("simple_repetition(Inicial,Comprimida)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("176"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("compress/2"),pred,"PREDICATE",compress/2,[],[[string_esc("Predicado principal para la compresión. Es cierto si "),var([string_esc("Comprimida")]),string_esc(" "),string_esc("es la versión comprimida (óptima según la heurística implementada) de la secuencia "),var([string_esc("Inicial")]),string_esc(". Utiliza memoización para mejorar la eficiencia.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("compress(Inicial,Comprimida)")),string_esc([])],raw_nl],[string_esc("Su implementación es: "),env_(verbatim,[raw_string("compress(Inicial,Comprimida) :-
    clean_memo,
    recursive_compression(Inicial,Comprimida).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Inicial")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("177"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Comprimida")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("178"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("compress(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("179"),string_esc("Inicial=[a,a,a,a]"),string_esc("Inicial=[a,a,a,a]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("180"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("181"),string_esc("Comprimida=[a,4]"),string_esc("Comprimida=[a,4]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("182"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("compress(Inicial,Comprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("183"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("compress(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("184"),string_esc("Inicial=[x,y,x,y,x,y]"),string_esc("Inicial=[x,y,x,y,x,y]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("185"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("186"),string_esc("Comprimida=[<,x,y,>,3]"),string_esc("Comprimida=[<,x,y,>,3]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("187"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("compress(Inicial,Comprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("188"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("compress(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("189"),string_esc("Inicial=[a,a,b,b,b]"),string_esc("Inicial=[a,a,b,b,b]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("190"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("191"),string_esc("Comprimida=[a,a,b,3]"),string_esc("Comprimida=[a,a,b,3]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("192"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("compress(Inicial,Comprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("193"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("compress(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("194"),string_esc("Inicial=[a,b,c,d,d,d,e,f]"),string_esc("Inicial=[a,b,c,d,d,d,e,f]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("195"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("196"),string_esc("Comprimida=[a,b,c,d,3,e,f]"),string_esc("Comprimida=[a,b,c,d,3,e,f]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("197"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("compress(Inicial,Comprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("198"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("compress(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("199"),string_esc("Inicial=[a,b,c,d,e]"),string_esc("Inicial=[a,b,c,d,e]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("200"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("201"),string_esc("Comprimida=[a,b,c,d,e]"),string_esc("Comprimida=[a,b,c,d,e]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("202"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("compress(Inicial,Comprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("203"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("compress(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("204"),string_esc("Inicial=[]"),string_esc("Inicial=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("205"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("206"),string_esc("Comprimida=[]"),string_esc("Comprimida=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("207"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("compress(Inicial,Comprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("208"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("compress(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("209"),string_esc("Inicial=[a,b,b,b,b,a,b,b,b,b]"),string_esc("Inicial=[a,b,b,b,b,a,b,b,b,b]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("210"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("211"),string_esc("Comprimida=[<,a,b,4,>,2]"),string_esc("Comprimida=[<,a,b,4,>,2]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("212"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("compress(Inicial,Comprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("213"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("compress(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("214"),string_esc("Inicial=[a,a,b,b,a,a,b,b,a,a,b,b,c]"),string_esc("Inicial=[a,a,b,b,a,a,b,b,a,a,b,b,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("215"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("216"),string_esc("Comprimida=[<,a,a,b,b,>,3,c]"),string_esc("Comprimida=[<,a,a,b,b,>,3,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("217"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("compress(Inicial,Comprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("218"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("memo/2"),pred,"PREDICATE",memo/2,[],[[string_esc("Predicado dinámico utilizado para la memoización. Almacena los resultados de compresiones ya calculadas ("),var([string_esc("Inicial")]),string_esc(" "),string_esc("-> "),var([string_esc("Comprimida")]),string_esc(") para evitar recálculos.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("memo(Inicial,Comprimida)")),string_esc([])],raw_nl],[string_esc("Almacena una "),var([string_esc("Comprimida")]),string_esc(" "),string_esc("para una "),var([string_esc("Inicial")]),string_esc(" "),string_esc("dada.")],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Inicial")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("219"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Comprimida")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("220"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))],[[[raw_nl,string_esc("The predicate is of type "),em(string_esc("dynamic")),string_esc("."),linebreak],[]],[]],[[]]]]),sp("1"),raw_nl],[defpred(local_label("clean_memo/0"),pred,"PREDICATE",clean_memo/0,[],[[string_esc("Limpia todos los hechos almacenados por el predicado "),idx_env(use,pred,localnum_label("221"),[string_esc("memo/2")],[string_esc("memo/2")]),string_esc(". Se llama antes de iniciar una nueva compresión completa.")],[[defassrt(check,[],"Usage:",[],[string_esc("Elimina todas las entradas de la tabla de memoización. Su implementación es: "),env_(verbatim,[raw_string("clean_memo :-
    retractall(memo(_1,_2)).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("recursive_compression/2"),pred,"PREDICATE",recursive_compression/2,[],[[string_esc("Núcleo recursivo de la compresión. Intenta encontrar la mejor compresión para "),var([string_esc("Inicial")]),string_esc(" "),string_esc("usando "),idx_env(use,pred,localnum_label("222"),[string_esc("better_compression_memo/2")],[string_esc("better_compression_memo/2")]),string_esc(". Si no se encuentra una compresión mejor que la original, devuelve la "),var([string_esc("Inicial")]),string_esc(" "),string_esc("misma. El corte asegura que se devuelve una única solución óptima.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("recursive_compression(Inicial,Comprimida)")),string_esc([])],raw_nl],[string_esc("Su implementación es: "),env_(verbatim,[raw_string("recursive_compression(Inicial,Comprimida) :-
    better_compression_memo(Inicial,Comprimida),
    !.
recursive_compression(Inicial,Inicial).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Inicial")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("223"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Comprimida")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("224"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("better_compression_memo/2"),pred,"PREDICATE",better_compression_memo/2,[],[[string_esc("Implementa la lógica de memoización para "),idx_env(use,pred,localnum_label("225"),[string_esc("better_compression/2")],[string_esc("better_compression/2")]),string_esc(". Primero consulta si la compresión para "),var([string_esc("Inicial")]),string_esc(" "),string_esc("ya está en "),idx_env(use,pred,localnum_label("226"),[string_esc("memo/2")],[string_esc("memo/2")]),string_esc(". Si no, llama a "),idx_env(use,pred,localnum_label("227"),[string_esc("better_compression/2")],[string_esc("better_compression/2")]),string_esc(" "),string_esc("para calcularla y luego la almacena en "),idx_env(use,pred,localnum_label("228"),[string_esc("memo/2")],[string_esc("memo/2")]),string_esc(".")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("better_compression_memo(Inicial,Comprimida)")),string_esc([])],raw_nl],[string_esc("Su implementación es: "),env_(verbatim,[raw_string("better_compression_memo(Inicial,Comprimida) :-
    memo(Inicial,Comprimida),
    !.
better_compression_memo(Inicial,Comprimida) :-
    better_compression(Inicial,Comprimida),
    assert(memo(Inicial,Comprimida)).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Inicial")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("229"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Comprimida")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("230"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("better_compression/2"),pred,"PREDICATE",better_compression/2,[],[[string_esc("Encuentra la mejor compresión para "),var([string_esc("Inicial")]),string_esc(" "),string_esc("entre todas las posibles compresiones generadas por "),idx_env(use,pred,localnum_label("231"),[string_esc("compression/2")],[string_esc("compression/2")]),string_esc(". Si ninguna compresión es más corta que "),var([string_esc("Inicial")]),string_esc(", "),var([string_esc("Comprimida")]),string_esc(" "),string_esc("se unifica con "),var([string_esc("Inicial")]),string_esc(".")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("better_compression(Inicial,Comprimida)")),string_esc([])],raw_nl],[string_esc("Selecciona la mejor "),var([string_esc("Comprimida")]),string_esc(" "),string_esc("para "),var([string_esc("Inicial")]),string_esc(". Su implementación es: "),env_(verbatim,[raw_string("better_compression(Inicial,Comprimida) :-
    findall(Comprimida,compression(Inicial,Comprimida),Lista),
    min_list(Lista,Posible_Comprimida),
    length(Inicial,L1),
    length(Posible_Comprimida,L2),
    ( L1&gt;L2 -&gt;
        Comprimida=Posible_Comprimida
    ; Comprimida=Inicial
    ).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Inicial")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("232"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Comprimida")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("233"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("compression/2"),pred,"PREDICATE",compression/2,[],[[string_esc("Generador de posibles compresiones para "),var([string_esc("Inicial")]),string_esc(". Intenta comprimir por "),idx_env(use,pred,localnum_label("234"),[string_esc("repetition/2")],[string_esc("repetition/2")]),string_esc(" "),string_esc("o por "),idx_env(use,pred,localnum_label("235"),[string_esc("division/2")],[string_esc("division/2")]),string_esc(".")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("compression(Inicial,Comprimida)")),string_esc([])],raw_nl],[string_esc("Su implementación es: "),env_(verbatim,[raw_string("compression(Inicial,Comprimida) :-
    repetition(Inicial,Comprimida).
compression(Inicial,Comprimida) :-
    division(Inicial,Comprimida).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Inicial")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("236"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Comprimida")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("237"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("repetition/2"),pred,"PREDICATE",repetition/2,[],[[string_esc("Intenta comprimir "),var([string_esc("Inicial")]),string_esc(" "),string_esc("encontrando una "),var([string_esc("Parte1")]),string_esc(" "),string_esc("que se repite "),var([string_esc("Num")]),string_esc(" "),string_esc("veces. La "),var([string_esc("Parte1")]),string_esc(" "),string_esc("se comprime recursivamente antes de ser agrupada.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("repetition(Inicial,Comprimida)")),string_esc([])],raw_nl],[string_esc("Su implementación es: "),env_(verbatim,[raw_string("repetition(Inicial,Comprimida) :-
    Inicial\\==[],
    split(Inicial,Parte1,_1),
    is_repeated(Inicial,Parte1,Num),
    Num&gt;1,
    recursive_compression(Parte1,Precomprimida),
    group(Precomprimida,Num,Comprimida).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Inicial")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("238"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Comprimida")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("239"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("repetition(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("240"),string_esc("Inicial=[a,a,a,a]"),string_esc("Inicial=[a,a,a,a]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("241"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[var([string_esc("Comprimida")]),string_esc(" "),string_esc("is an element of "),var([string_esc("[[a,4],[<,a,a,>,2]]")]),string_esc(".")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("242"),string_esc("member/2"),string_esc("member/2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("repetition(Inicial,Comprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("243"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("repetition(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("244"),string_esc("Inicial=[x,y,x,y,x,y]"),string_esc("Inicial=[x,y,x,y,x,y]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("245"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("246"),string_esc("Comprimida=[<,x,y,>,3]"),string_esc("Comprimida=[<,x,y,>,3]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("247"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("repetition(Inicial,Comprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("248"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("repetition(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("249"),string_esc("Inicial=[]"),string_esc("Inicial=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("250"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("repetition(Inicial,Comprimida)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("251"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("repetition(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("252"),string_esc("Inicial=[a,a,a,b,b,b]"),string_esc("Inicial=[a,a,a,b,b,b]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("253"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("repetition(Inicial,Comprimida)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("254"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("repetition(Inicial,Comprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("255"),string_esc("Inicial=[a,b,c,d,e]"),string_esc("Inicial=[a,b,c,d,e]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("256"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("repetition(Inicial,Comprimida)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("257"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("division/2"),pred,"PREDICATE",division/2,[],[[string_esc("Intenta comprimir "),var([string_esc("Inicial")]),string_esc(" "),string_esc("dividiéndola en dos "),var([string_esc("Parte1")]),string_esc(" "),string_esc("y "),var([string_esc("Parte2")]),string_esc(", comprimiendo cada una recursivamente, y luego concatenando sus compresiones. Solo tiene éxito si al menos una de las partes se comprime")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("division(Inicial,Comprimida)")),string_esc([])],raw_nl],[string_esc("Su implementación es: "),env_(verbatim,[raw_string("division(Inicial,Comprimida) :-
    Inicial\\==[],
    split(Inicial,Parte1,Parte2),
    recursive_compression(Parte1,Precomprimida1),
    recursive_compression(Parte2,Precomprimida2),
    ( Precomprimida1\\==Parte1
    ; Precomprimida2\\==Parte2
    ),
    append(Precomprimida1,Precomprimida2,Comprimida).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Inicial")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("258"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Comprimida")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("259"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("decompress/2"),pred,"PREDICATE",decompress/2,[],[[string_esc("Predicado principal para la descompresión. Es cierto si "),var([string_esc("Descomprimida")]),string_esc(" "),string_esc("es la secuencia original que resulta de descomprimir la secuencia "),var([string_esc("Comprimida")]),string_esc(". Maneja los diferentes formatos de compresión (grupos simples, grupos complejos, caracteres sueltos).")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("decompress(Comprimida,Descomprimida)")),string_esc([])],raw_nl],[string_esc("Su implementación es: "),env_(verbatim,[raw_string("decompress([],[]).
decompress([&lt;|T1],Descomprimida) :-
    !,
    extract_group(T1,Patron,Num,Resto),
    decompress(Patron,PatronDesc),
    expand_sequence(PatronDesc,Num,GrupoDesc),
    decompress(Resto,RestoDesc),
    append(GrupoDesc,RestoDesc,Descomprimida).
decompress([Caracter,Num|Resto],Descomprimida) :-
    atom(Caracter),
    Caracter\\== &lt;,
    Caracter\\== &gt;,
    integer(Num),
    Num&gt;1,
    !,
    expand_sequence([Caracter],Num,GrupoDesc),
    decompress(Resto,RestoDesc),
    append(GrupoDesc,RestoDesc,Descomprimida).
decompress([Caracter|RestoComp],[Caracter|RestoDesc]) :-
    atom(Caracter),
    Caracter\\== &lt;,
    Caracter\\== &gt;,
    !,
    decompress(RestoComp,RestoDesc).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Comprimida")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("260"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Descomprimida")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("261"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("decompress(Comprimida,Descomprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("262"),string_esc("Comprimida=[a,4]"),string_esc("Comprimida=[a,4]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("263"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("264"),string_esc("Descomprimida=[a,a,a,a]"),string_esc("Descomprimida=[a,a,a,a]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("265"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("decompress(Comprimida,Descomprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("266"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("decompress(Comprimida,Descomprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("267"),string_esc("Comprimida=[<,x,y,>,3]"),string_esc("Comprimida=[<,x,y,>,3]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("268"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("269"),string_esc("Descomprimida=[x,y,x,y,x,y]"),string_esc("Descomprimida=[x,y,x,y,x,y]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("270"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("decompress(Comprimida,Descomprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("271"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("decompress(Comprimida,Descomprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("272"),string_esc("Comprimida=[a,a,b,3]"),string_esc("Comprimida=[a,a,b,3]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("273"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("274"),string_esc("Descomprimida=[a,a,b,b,b]"),string_esc("Descomprimida=[a,a,b,b,b]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("275"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("decompress(Comprimida,Descomprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("276"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("decompress(Comprimida,Descomprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("277"),string_esc("Comprimida=[a,b,c,d,3,e,f]"),string_esc("Comprimida=[a,b,c,d,3,e,f]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("278"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("279"),string_esc("Descomprimida=[a,b,c,d,d,d,e,f]"),string_esc("Descomprimida=[a,b,c,d,d,d,e,f]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("280"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("decompress(Comprimida,Descomprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("281"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("decompress(Comprimida,Descomprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("282"),string_esc("Comprimida=[a,b,c,d,e]"),string_esc("Comprimida=[a,b,c,d,e]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("283"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("284"),string_esc("Descomprimida=[a,b,c,d,e]"),string_esc("Descomprimida=[a,b,c,d,e]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("285"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("decompress(Comprimida,Descomprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("286"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("decompress(Comprimida,Descomprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("287"),string_esc("Comprimida=[]"),string_esc("Comprimida=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("288"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("289"),string_esc("Descomprimida=[]"),string_esc("Descomprimida=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("290"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("decompress(Comprimida,Descomprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("291"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("decompress(Comprimida,Descomprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("292"),string_esc("Comprimida=[<,a,b,4,>,2]"),string_esc("Comprimida=[<,a,b,4,>,2]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("293"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("294"),string_esc("Descomprimida=[a,b,b,b,b,a,b,b,b,b]"),string_esc("Descomprimida=[a,b,b,b,b,a,b,b,b,b]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("295"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("decompress(Comprimida,Descomprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("296"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("decompress(Comprimida,Descomprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("297"),string_esc("Comprimida=[<,a,a,b,b,>,3,c]"),string_esc("Comprimida=[<,a,a,b,b,>,3,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("298"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("299"),string_esc("Descomprimida=[a,a,b,b,a,a,b,b,a,a,b,b,c]"),string_esc("Descomprimida=[a,a,b,b,a,a,b,b,a,a,b,b,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("300"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("decompress(Comprimida,Descomprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("301"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("decompress(Comprimida,Descomprimida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("302"),string_esc("Comprimida=[a,a,a,b,3]"),string_esc("Comprimida=[a,a,a,b,3]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("303"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("304"),string_esc("Descomprimida=[a,a,a,b,b,b]"),string_esc("Descomprimida=[a,a,a,b,b,b]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("305"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("decompress(Comprimida,Descomprimida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("306"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("extract_group/4"),pred,"PREDICATE",extract_group/4,[],[[string_esc("Predicado auxiliar para "),idx_env(use,pred,localnum_label("307"),[string_esc("decompress/2")],[string_esc("decompress/2")]),string_esc(". Dada una "),var([string_esc("Lista")]),string_esc(" "),string_esc("(la parte de una secuencia comprimida después de un '<'), extrae el "),var([string_esc("Patron")]),string_esc(" "),string_esc("interno (hasta el '>'), el "),var([string_esc("Num")]),string_esc(" "),string_esc("de repetición que sigue al '>', y el "),var([string_esc("Resto")]),string_esc(" "),string_esc("de la "),var([string_esc("Lista")]),string_esc(" "),string_esc("original después de "),var([string_esc("Num")]),string_esc(".")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("extract_group(Lista,Patron,Num,Resto)")),string_esc([])],raw_nl],[string_esc("Su implementación es: "),env_(verbatim,[raw_string("extract_group(Lista,Patron,Num,Resto) :-
    append(Parte1,Resto,Lista),
    append(ParteInterna,[Num],Parte1),
    integer(Num),
    Num&gt;=0,
    append(Patron,[&gt;],ParteInterna).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Lista")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("308"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Patron")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("309"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Num")]),string_esc(" "),string_esc("is currently instantiated to an integer.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("310"),string_esc("integer/1"),string_esc("integer/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Resto")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("311"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("min_list/2"),pred,"PREDICATE",min_list/2,[],[[string_esc("Encuentra la secuencia "),var([string_esc("Min")]),string_esc(" "),string_esc("de menor longitud en una "),var([string_esc("Lista")]),string_esc(" "),string_esc("de secuencias.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("min_list(Lista,Min)")),string_esc([])],raw_nl],[string_esc("Su implementación es: "),env_(verbatim,[raw_string("min_list([H|T],Min) :-
    length(H,L1),
    min_list_aux(T,H,L1,Min).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Lista")]),string_esc(" "),string_esc("is a list of "),var([string_esc("list")]),string_esc("s.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("312"),string_esc("list/2"),string_esc("list/2"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Min")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("313"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("min_list(Lista,Min)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("314"),string_esc("Lista=[[a,b,c],[a,b],[a,b,a,b]]"),string_esc("Lista=[[a,b,c],[a,b],[a,b,a,b]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("315"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("316"),string_esc("Min=[a,b]"),string_esc("Min=[a,b]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("317"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("min_list(Lista,Min)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("318"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("min_list(Lista,Min)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("319"),string_esc("Lista=[[a,b,c],[a],[a,b],[a]]"),string_esc("Lista=[[a,b,c],[a],[a,b],[a]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("320"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("321"),string_esc("Min=[a]"),string_esc("Min=[a]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("322"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("min_list(Lista,Min)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("323"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("min_list(Lista,Min)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("324"),string_esc("Lista=[[a,b,c]]"),string_esc("Lista=[[a,b,c]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("325"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("326"),string_esc("Min=[a,b,c]"),string_esc("Min=[a,b,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("327"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("min_list(Lista,Min)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("328"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("min_list(Lista,Min)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("329"),string_esc("Lista=[]"),string_esc("Lista=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("330"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("min_list(Lista,Min)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("331"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("min_list_aux/4"),pred,"PREDICATE",min_list_aux/4,[],[[string_esc("Auxiliar recursivo de cola para "),idx_env(use,pred,localnum_label("332"),[string_esc("min_list/2")],[string_esc("min_list/2")]),string_esc(". Mantiene el "),var([string_esc("Min_Actual")]),string_esc(" "),string_esc("y su longitud "),var([string_esc("L")]),string_esc(", comparándolos con el siguiente elemento de la "),var([string_esc("Lista")]),string_esc(" "),string_esc("para encontrar el "),var([string_esc("Min_Final")]),string_esc(".")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("min_list_aux(Lista,Min_Actual,L,Min_Final)")),string_esc([])],raw_nl],[string_esc("Auxiliar para "),idx_env(use,pred,localnum_label("333"),[string_esc("min_list/2")],[string_esc("min_list/2")]),string_esc(". Su implementación es: "),env_(verbatim,[raw_string("min_list_aux([],Min_Actual,_1,Min_Actual).
min_list_aux([H|T],Min_Actual,L,Min_Final) :-
    length(H,L2),
    ( L2&lt;L -&gt;
        min_list_aux(T,H,L2,Min_Final)
    ; min_list_aux(T,Min_Actual,L,Min_Final)
    ).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Lista")]),string_esc(" "),string_esc("is a list of "),var([string_esc("list")]),string_esc("s.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("334"),string_esc("list/2"),string_esc("list/2"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Min_Actual")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("335"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("L")]),string_esc(" "),string_esc("is currently instantiated to an integer.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("336"),string_esc("integer/1"),string_esc("integer/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Min_Final")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("337"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("expand_sequence/3"),pred,"PREDICATE",expand_sequence/3,[],[[string_esc("Crea una "),var([string_esc("SecuenciaExpandida")]),string_esc(" "),string_esc("repitiendo la "),var([string_esc("Secuencia")]),string_esc(" "),string_esc("de entrada "),var([string_esc("Num")]),string_esc(" "),string_esc("veces.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("expand_sequence(Secuencia,Num,SecuenciaExpandida)")),string_esc([])],raw_nl],[string_esc("Su implementación es: "),env_(verbatim,[raw_string("expand_sequence(_1,0,[]).
expand_sequence(Secuencia,Num,SecuenciaExpandida) :-
    Num&gt;0,
    Num1 is Num-1,
    expand_sequence(Secuencia,Num1,SecuenciaParcial),
    append(Secuencia,SecuenciaParcial,SecuenciaExpandida).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("Secuencia")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("338"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Num")]),string_esc(" "),string_esc("is currently instantiated to an integer.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("339"),string_esc("integer/1"),string_esc("integer/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("SecuenciaExpandida")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("340"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("expand_sequence(Secuencia,Num,SecuenciaExpandida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("341"),string_esc("Secuencia=[a,b,c]"),string_esc("Secuencia=[a,b,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("342"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("343"),string_esc("Num=3"),string_esc("Num=3"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("344"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("345"),string_esc("SecuenciaExpandida=[a,b,c,a,b,c,a,b,c]"),string_esc("SecuenciaExpandida=[a,b,c,a,b,c,a,b,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("346"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("expand_sequence(Secuencia,Num,SecuenciaExpandida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("347"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("expand_sequence(Secuencia,Num,SecuenciaExpandida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("348"),string_esc("Secuencia=[]"),string_esc("Secuencia=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("349"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("350"),string_esc("Num=0"),string_esc("Num=0"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("351"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("352"),string_esc("SecuenciaExpandida=[]"),string_esc("SecuenciaExpandida=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("353"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("expand_sequence(Secuencia,Num,SecuenciaExpandida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("354"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("expand_sequence(Secuencia,Num,SecuenciaExpandida)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("355"),string_esc("Secuencia=[a,b,c]"),string_esc("Secuencia=[a,b,c]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("356"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("357"),string_esc("Num=0"),string_esc("Num=0"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("358"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("359"),string_esc("SecuenciaExpandida=[]"),string_esc("SecuenciaExpandida=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("360"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("expand_sequence(Secuencia,Num,SecuenciaExpandida)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("361"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl]]),section_env([with_parent,level(2)],local_label("Documentation on multifiles"),string_esc("Documentation on multifiles"),[[defpred(local_label([6,99,97,108,108,95,105,110,95,109,111,100,117,108,101,47,50]),pred,"PREDICATE",'\006\call_in_module'/2,[],[string_esc("No further documentation available for this predicate."),[[],[[],[[raw_nl,string_esc("The predicate is "),em(string_esc("multifile")),string_esc("."),linebreak],[]]],[[]]]]),sp("1"),raw_nl]]),[],section_env([with_parent,level(2)],local_label("Documentation on imports"),string_esc("Documentation on imports"),[string_esc("This module has the following direct dependencies:"),itemize_env(minus,[[item([]),em([string_esc("Application modules"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("362"),string_esc("operators"),string_esc("operators")),string_esc(", ")],[idx_env(use,code,localnum_label("363"),string_esc("dcg_phrase_rt"),string_esc("dcg_phrase_rt")),string_esc(", ")],[idx_env(use,code,localnum_label("364"),string_esc("datafacts_rt"),string_esc("datafacts_rt")),string_esc(", ")],[idx_env(use,code,localnum_label("365"),string_esc("dynamic_rt"),string_esc("dynamic_rt")),string_esc(", ")],[idx_env(use,code,localnum_label("366"),string_esc("classic_predicates"),string_esc("classic_predicates")),string_esc(".")]],raw_nl]],nop,nop,[item([]),em([string_esc("Internal (engine) modules"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("367"),string_esc("term_basic"),string_esc("term_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("368"),string_esc("arithmetic"),string_esc("arithmetic")),string_esc(", ")],[idx_env(use,code,localnum_label("369"),string_esc("atomic_basic"),string_esc("atomic_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("370"),string_esc("basiccontrol"),string_esc("basiccontrol")),string_esc(", ")],[idx_env(use,code,localnum_label("371"),string_esc("exceptions"),string_esc("exceptions")),string_esc(", ")],[idx_env(use,code,localnum_label("372"),string_esc("term_compare"),string_esc("term_compare")),string_esc(", ")],[idx_env(use,code,localnum_label("373"),string_esc("term_typing"),string_esc("term_typing")),string_esc(", ")],[idx_env(use,code,localnum_label("374"),string_esc("debugger_support"),string_esc("debugger_support")),string_esc(", ")],[idx_env(use,code,localnum_label("375"),string_esc("hiord_rt"),string_esc("hiord_rt")),string_esc(", ")],[idx_env(use,code,localnum_label("376"),string_esc("stream_basic"),string_esc("stream_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("377"),string_esc("io_basic"),string_esc("io_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("378"),string_esc("runtime_control"),string_esc("runtime_control")),string_esc(", ")],[idx_env(use,code,localnum_label("379"),string_esc("basic_props"),string_esc("basic_props")),string_esc(".")]],raw_nl]],[item([]),em([string_esc("Packages"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("380"),string_esc("prelude"),string_esc("prelude")),string_esc(", ")],[idx_env(use,code,localnum_label("381"),string_esc("initial"),string_esc("initial")),string_esc(", ")],[idx_env(use,code,localnum_label("382"),string_esc("condcomp"),string_esc("condcomp")),string_esc(", ")],[idx_env(use,code,localnum_label("383"),string_esc("classic"),string_esc("classic")),string_esc(", ")],[idx_env(use,code,localnum_label("384"),string_esc("runtime_ops"),string_esc("runtime_ops")),string_esc(", ")],[idx_env(use,code,localnum_label("385"),string_esc("dcg"),string_esc("dcg")),string_esc(", ")],[idx_env(use,code,localnum_label("386"),string_esc("dcg/dcg_phrase"),string_esc("dcg/dcg_phrase")),string_esc(", ")],[idx_env(use,code,localnum_label("387"),string_esc("dynamic"),string_esc("dynamic")),string_esc(", ")],[idx_env(use,code,localnum_label("388"),string_esc("datafacts"),string_esc("datafacts")),string_esc(", ")],[idx_env(use,code,localnum_label("389"),string_esc("assertions"),string_esc("assertions")),string_esc(", ")],[idx_env(use,code,localnum_label("390"),string_esc("assertions/assertions_basic"),string_esc("assertions/assertions_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("391"),string_esc("regtypes"),string_esc("regtypes")),string_esc(".")]],raw_nl]]])])]],section_env([unnumbered,level(1),subfile(search),is_special(search)],global_label("Search this manual"),string_esc("Search this manual"),[[raw_nl,[string_esc("Type below to search for where concepts, predicates,
 modes, properties, types, applications, authors, etc., are defined or
 referred to in this manual. Use "),tt(string_esc("_")),string_esc(" to show all entries in the index.")],linebreak],linebreak,htmlenv(input,[type="text",id="search-input"],[]),htmlenv(div,[id="search-results"],[]),htmlenv(div,[id="search-index",style="display:none"],[show_index(global)])])]).